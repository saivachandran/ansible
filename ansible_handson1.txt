## ansible inventry

#cd /etc/ansible/

# ls

ansible.cfg  hosts  roles

# vim ansible.cfg

uncomment inventry = /etc/ansible/host

esc
:wq!
------------------------------------------------------------------

vim hosts

add remote servers

[webserver1] -- group name

172.17.0.2   host ip

[webserver2] -- group name

172.17.0.3  host ip

[webserver3] -- group name

172.17.0.4   host ip

esc
:wq!

---------------------------------------------------------------
using ping module ping with all remote server its shows error

create ssh key share with remote hosts

# ssh-keygen -t rsa

hit enter

keys saved /root/.ssh/id_rsa_pub


ssh-copy-id ~/.ssh/id_rsa root@172.17.0.2

enter password: 

----------------------------------------------------------------

list ansible host

ansible --list-host all

hosts (3):
    172.17.0.3
    172.17.0.2
    172.17.0.4
--------------------------------------------------------------

# ansible -m ping all

172.17.0.2 | SUCCESS => {
    "ansible_facts": {
        "discovered_interpreter_python": "/usr/bin/python3"
    }, 
    "changed": false, 
    "ping": "pong"
}
172.17.0.3 | SUCCESS => {
    "ansible_facts": {
        "discovered_interpreter_python": "/usr/bin/python3"
    }, 
    "changed": false, 
    "ping": "pong"
}

now connected successfully
-------------------------------------------------------------------- 
display output in single line

ansible -m ping all -o

172.17.0.2 | SUCCESS => {"ansible_facts": {"discovered_interpreter_python": "/usr/bin/python3"}, "changed": false, "ping": "pong"}
172.17.0.3 | SUCCESS => {"ansible_facts": {"discovered_interpreter_python": "/usr/bin/python3"}, "changed": false, "ping": "pong"}

# ansible -m shell -a "uptime"

172.17.0.2 | CHANGED | rc=0 >>
 08:49:46 up 5 min,  1 user,  load average: 0.09, 0.05, 0.01
172.17.0.4 | CHANGED | rc=0 >>
 08:49:46 up 5 min,  1 user,  load average: 0.09, 0.05, 0.01
----------------------------------------------------------------------------
custom inventry file

vim /root/hostfile

[webserver1]
172.17.0.2

ansible -i /root/hostfile webserver1 -m ping

172.17.0.2 | SUCCESS => {
    "ansible_facts": {
        "discovered_interpreter_python": "/usr/bin/python3"
    }, 
    "changed": false, 
    "ping": "pong"
}


make custom path to default path

vim ansible.cfg

inventory = /root/hostfile

ansible all -m ping 

172.17.0.2 | SUCCESS => {
    "ansible_facts": {
        "discovered_interpreter_python": "/usr/bin/python3"
    }, 
    "changed": false, 
    "ping": "pong"
}

------------------------------------------------------------------------------------------------
ansible playbook

**handson1**

install apache webserver on ubuntu remote machine

# mkdir ansiblepay

# cd ansibleplay

# vim install.yml

---
- hosts: webserver1
  tasks:
  - name: install apache webserver in ubuntu machine
    apt: name=apache2 state=latest
  - name: start apache service
    service: name=apache2 state=restarted

...   

esc
:wq!
----------------------------------------------------------------------

check ansible syntax error

# ansible-play install.yml --syntax-check 

playbook: install.yml

it's not display any error we can run playbook

if it's shows error we check playbook
----------------------------------------------------------------

if we have error playbook it show like below

# ansible-play install.yml --syntax-check 

ERROR! Syntax Error while loading YAML.
  did not find expected key

The error appears to be in '/root/ansibleplay/install.yml': line 5, column 4, but may
be elsewhere in the file depending on the exact syntax problem.

The offending line appears to be:

  - name: install apache webserver in ubuntu machine
   apt: name=apache2 state=latest
   ^ here
-----------------------------------------------------------------------------

check which remote host ansible playbook run

# ansible-playbook install.yml --list-host

playbook: install.yml

  play #1 (webserver1): webserver1	TAGS: []
    pattern: [u'webserver1']
    hosts (1):
      172.17.0.2
---------------------------------------------------------------------------------------------------------------------------

run ansible playbook

ansible-playbook install.yml 

PLAY [all] *************************************************************************************************************************************

TASK [Gathering Facts] *************************************************************************************************************************
ok: [172.17.0.3]
ok: [172.17.0.2]
ok: [172.17.0.4]

TASK [install apache webserver in ubuntu machine] **********************************************************************************************
ok: [172.17.0.2]
[WARNING]: Updating cache and auto-installing missing dependency: python3-apt
changed: [172.17.0.4]
changed: [172.17.0.3]

TASK [start apache service] ********************************************************************************************************************
changed: [172.17.0.3]
changed: [172.17.0.4]
changed: [172.17.0.2]

PLAY RECAP *************************************************************************************************************************************
172.17.0.2                 : ok=3    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   
172.17.0.3                 : ok=3    changed=2    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   
172.17.0.4                 : ok=3    changed=2    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   
--------------------------------------------------------------------------------------------------------------------------------
uninstall apache webserver using ansible playbook

vim unintsall.yml

---
- hosts: all
  tasks:
  - name: uninstall apache web server on remote hosts
    apt: name=apache2 state=absent
...    

------------------------------------------------------------

# ansible-playbook uninstall.yml --syntax-check 

# ansible-playbook uninstall.yml

ansible-playbook unintsall.yml 

PLAY [all] *************************************************************************************************************************************

TASK [Gathering Facts] *************************************************************************************************************************
ok: [172.17.0.3]
ok: [172.17.0.2]
ok: [172.17.0.4]

TASK [uninstall apache web server on remote hosts] *********************************************************************************************
ok: [172.17.0.2]
ok: [172.17.0.3]
ok: [172.17.0.4]

PLAY RECAP *************************************************************************************************************************************
172.17.0.2                 : ok=2    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   
172.17.0.3                 : ok=2    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   
172.17.0.4                 : ok=2    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   

-------------------------------------------------------------------------------------------------------------------------------

copy file from control node to remote node in ansible


vim copy.yml
---
- hosts: all
  tasks:
  - name: copy file from host to running container
    copy: src=/root/ansibleplay/install.yml  dest=/root/ owner=root group=root mode=600
...

esc
:wq!

# ansible-playbook copy.yml --syntax-check

playbook: copy.yml

# ansible-playbook copy.yml

PLAY [all] *************************************************************************************************************************************

TASK [Gathering Facts] *************************************************************************************************************************
ok: [172.17.0.3]
ok: [172.17.0.4]
ok: [172.17.0.2]

TASK [copy file from host to running container] ************************************************************************************************
changed: [172.17.0.4]
changed: [172.17.0.2]
changed: [172.17.0.3]

PLAY RECAP *************************************************************************************************************************************
172.17.0.2                 : ok=2    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   
172.17.0.3                 : ok=2    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   
172.17.0.4                 : ok=2    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   

----------------------------------------------------------------------------------------------------------------------------------

change file file permission in remote node using ansible

vim file.yml

---
- hosts: all
  tasks:
  - name: change remote machine file permission
    file: dest=/root/install.yml owner=sai group=sai mode=644

...    

esc
:wq!



# ansible-playbook file.yml --syntax-check

playbook: file.yml


# ansible-playbook file.yml 

PLAY [all] *************************************************************************************************************************************

TASK [Gathering Facts] *************************************************************************************************************************
ok: [172.17.0.2]
ok: [172.17.0.4]
ok: [172.17.0.3]

TASK [change remote machine file permission] ***************************************************************************************************
changed: [172.17.0.2]
changed: [172.17.0.3]
changed: [172.17.0.4]

PLAY RECAP *************************************************************************************************************************************
172.17.0.2                 : ok=2    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   
172.17.0.3                 : ok=2    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   
172.17.0.4                 : ok=2    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   
---------------------------------------------------------------------------------------------------------------------------------

copy file from remote machine to host machine 

vim fetch.yml

---
- hosts: webserver1
  tasks:
  - name: copy file from remotemachine to host machine
    fetch:
      src: /root/sai2.txt
      dest: /root/ansibleplay/sai/
...      

esc
:wq!

# ansible-playbook fetch.yml --syntax-check

# ansible-playbook fetch.yml --list-host

# ansible-playbook fetch.yml

---------------------------------------------------------------------------------------------------------------------
delete file from remote server

vim delete.yml

---
- hosts: webserver1
  tasks:
  - name:  delete file from remote server
    file:
      path: /root/user.txt
      state: absent
...      
esc
:wq!

# ansible-playbook delete.yml --syntax-check

# ansible-playbook delete.yml --list-host

# ansible-playbook delete.yml

check file deleted or not in the remote server

----------------------------------------------------------------------------------------------------------------------

create file in remote server 

vim touch.yml

---
- hosts: webserver1
  tasks:
  - name: creat file in remote server
    file:
      path: /root/kk.txt
      state: touch
      owner: sai
      group: sai
      mode: '755'
...      

esc
:wq!

# ansible-playbook touch.yml --syntax-check 

# ansible-playbook touh.yml --list-host

# ansible-playbook touch.yml
----------------------------------------------------------------------------------------------------------------------

multifile file creation

vim multitouch.yml

---
- hosts: webserver1
  tasks:
  - name: 
    file:
      path: "{{ item }}"
      state: touch 
      owner: sai
      group: sai
      mode: '644'
    with_items:
    - devops1.txt
    - devops2.txt
    - devops3.txt
...

esc
:wq!

# ansible-playbook multitouch.yml --syntax-check

# ansible-playbook multitouch --list-host

# ansible-playbook multitouch.yml

-----------------------------------------------------------------------------------------------------------------------
delete multiple file in remote server

vim deletemul.yml

---
- hosts: webserver1
  tasks:
  - name: 
    file:
      path: "{{ item }}"
      state: absent 
      owner: sai
      group: sai
      mode: '644'
    with_items:
    - devops1.txt
    - devops2.txt
    - devops3.txt
...

esc
:wq!

# ansible-playbook deletemul.yml --syntax-check

# ansible-playbook deletemul.yml --list-host

# ansible-playbook deletemul.yml


--------------------------------------------------------------------------------------------------------------

create directory in remote server

vim directory.yml

---
- hosts: webserver1
  tasks:
  - name: create directory in remote server
    file:
      path: /root/sachin
      state: directory
      owner: sai
      group: sai
      mode: '755'
...      
esc
:wq!

# ansible-playbook directory.yml --syntax-check

# ansible-playbook directory.yml --list-host

# ansible-playbook directory.yml


-----------------------------------------------------------------------------------------
 
create directory in remote server

vim muldir.yml

---
- hosts: webserver1
  tasks:
  - name: create directory in remote server
    file:
      path: "{{ items }}"
      state: directory
      owner: sai
      group: sai
      mode: '755'
    with_items:
    - sachin
    - rohit
    - gilly 
...      
esc
:wq!

# ansible-playbook muldir.yml --syntax-check

# ansible-playbook muldir.yml --list-host

# ansible-playbook muldir.yml

-------------------------------------------------------------------------------------------
create user in remote machine using ansible

vim user.yml

---
- hosts: webserver2
  tasks:
  - name: create user in remote server
    user:
      name: kaviya
      comment: kaviya s
      shell: /bin/bash
      uid: 1200
      group: root
...      

esc
:wq!

# ansible-playbook user.yml --syntax-check

# ansible-playbook user.yml --list-host

# ansible-playbook user.yml

----------------------------------------------------------------------------------------------
delete user from remote server

vim userrem.yml

---
- hosts: webserver2
  tasks:
  - name: create user in remote server
    user:
      name: kaviya
      comment: kaviya s
      shell: /bin/bash
      uid: 1200
      group: root
      state: absent
      remove: yes
...      

esc
:wq!

# ansible-playbook userrem.yml --syntax-check

# ansible-playbook userrem.yml --list-host

# ansible-playbook userrem.yml

----------------------------------------------------------------------------------------------------

ansibe paybook using handler task

vim handlers.yml

---
- hosts: webserver2
  tasks:
  - name: 
    file:
      path: /opt/cache
      state: directory
  - name: install nginx
    yum:
      name: nginx
      state: latest
    notify: restart nginx
  handlers:
   - name: restart nginx
     service: 
       name: nginx
       state: restarted

...       

esc
:wq!

# ansible-playbook handlers.yml --syntax-check

# ansible-playbook handlers.yml --list-host

# ansible-playbook handlers.yml

------------------------------------------------------------------------------

ansible module

file module 

play1:

vim file3.yml

---
- hosts: webserver1
  tasks:
  - name: change file ownership group and permission
    file:
      path: /root/sai/kaviya.txt
      owner: sai
      group: sai
      mode: '0655'
... 

esc
:wq!

# ansible-playbook file2.yml  --syntax-check

# ansible-playbook file2.yml  --list-host

# ansible-playbook file2.yml



play2

vim file3.yml

---
- hosts: webserver1
  tasks:
  - name: change file ownership group and permission
    file:
      path: /root/sai/kaviya.txt
      owner: sai
      group: sai
      mode: '0655'
... 

esc
:wq!

# ansible-playbook file3.yml --syntax-check

# ansible-playbook file3.yml --list-host

# ansible-playbook file3.yml


--------------------------------------------------------------------------------
vim link.yml
---
- hosts: webserver1
  tasks:
  - name:   
    file:
      src: /root/sai/test.txt
      dest: /root/kavi/test.txt
      owner: sai
      group: sai
      state: link
...   

# ansible-playbook link.yml --syntax-check

# ansible-playbook link.yml --list-host

# ansible-playbook link.yml

---------------------------------------------------------------------------------
save remote remote gatherfact detail in the local system

vim gatherfacts1.yml

---
- hosts: webserver1
  gather_facts: yes
  tasks:
    - debug: var=ansible_date_time
      register: date_time
    - local_action: "copy content='{{ date_time }}' dest=/etc/ansible/data1.txt"

...

# ansible-playbook gatherfacts1.yml --syntax-check

# ansible-playbook gatherfacts1.yml --list-host

# ansible-playbook gatherfacts1.yml
   
---------------------------------------------------------------------------------

ansible jinja2 template playbook

vim host.yml

---
- hosts: webserver1
  gather_facts: yes
  tasks:
  - name: collect remote system data       
    debug:     
      msg: system {{ ansible_eth0 }}
  - template:
          src: ./hostname.j2
          dest: /tmp/hostname.txt    
    delegate_to: localhost
            
...

esc
:wq!


jinja2 yaml file

vim hostname.j2

{% for i,j in   ansible_eth0.items() %}
{% if i == 'ipv4' %}
{% for b,c in j.items() %}
{{ b.ljust(10)  }} - {{c}}
{% endfor %}
{% else %}  
{{ i.ljust(10) }} - {{ j}}
{% endif %}
{% endfor %}


esc
:wq!

# ansible-playbook host.yml --syntax-check

# ansible-playbook host.yml --list-host

# ansible-playbook host.yml

check hostname.txt file

# cat /tmp/hostname.txt
--------------------------------------------------------------------------------------------------------

copy module 

copy file from host to remote

vim copy.yml

---
- hosts: webserver1
  tasks:
  - name: copy file host to reomte 
    copy:
      src: user.txt
      dest: /root/
...        

# ansible-playbook copy.yml --syntax-check

# ansible-playbook copy.yml --list-host

# ansible-playbook copy.yml
------------------------------------------------------------------------------------------------------


copy module 

copy file from host to remote

vim copy1.yml

---
- hosts: webserver1
  tasks:
  - name: copy file host to reomte 
    fetch:
      src: user.txt
      dest: /root/
...        

# ansible-playbook copy1.yml --syntax-check

# ansible-playbook copy1.yml --list-host

# ansible-playbook copy1.yml

---------------------------------------------------------------------------------------------------

cpy file only file conetent to remote host

---
- hosts: webserver1
  tasks:
  - name: copy file host to reomte 
    copy:
      content:
      src: user.txt
      dest: /root/user3.txt      
...      

# ansible-playbook copy3.yml --syntax-check

# ansible-playbook copy3.yml --list-host

# ansible-playbook copy3.yml

-------------------------------------------------------------------------------------------------
ansible find and replace using linein command

vim lineinfile.yml

--- 
- hosts: webserver1 
  tasks:
  - name:
    lineinfile:
      path: /root/selinux.txt 
      regexp: 'SELINUX='
      line: SELINUX=disabled


# ansible-playbook lineinfile.yml --syntax-check

# ansible-playbook lineinfile.yml --list-host

# ansible-playbook lineinfile.yml

----------------------------------------------------------------------------------------------

ansible command module

vim command.yml

---
- name: check remote server uptime
  hosts: webserver1
  tasks:
  - name: execute uptime command over command module
    register: uptimeoutput
    command: "uptime"

  - debug:
      var: uptimeoutput
...  


# ansible-playbook command.yml --syntax-check

# ansible-playbook command.yml --list-host

# ansible-playbook command.yml

---------------------------------------------------------------------------------------------

vim command1.yml

---
- name: check the remote hosname and details
  hosts: webserver1
  tasks:
  - name:  execute uname command over command module
    command: "uname -a"
    register: _result
  - debug:
      msg: _result


# ansible-playbook command1.yml --syntax-check

# ansible-playbook command1.yml --list-host

# ansible-playbook command1.yml
         
-----------------------------------------------------------------------------------------

ansible shell module

vim shell.yml

---
- hosts: webserver1     
  tasks:
  - name:        
    shell: ls -ltr /root/ >> /root/hello.txt
    
...

# ansible-playbook shell.yml --syntax-check

# ansible-playbook shell.yml --list-host

# ansible-playbook shell.yml
-------------------------------------------------------------------------------------------   

ansible shell module

vim shell1.yml

---
- hosts: webserver1     
  tasks:
  - name:        
    shell: echo "hello world" > /root/hello.txt
    
...

# ansible-playbook shell1.yml --syntax-check

# ansible-playbook shell1.yml --list-host

# ansible-playbook shell1.yml  

-------------------------------------------------------------------------------------------

Use the creates argument to run the shell command only if a file doesn’t exist already.

vim shell2.yml

---
- hosts: webserver1
  tasks:
  - name: create file if doesn't exist
    shell: echo "saiva" > /root/hello.txt
    args:
      creates: /root/hello.txt
...  

# ansible-playbook shell2.yml --syntax-check

# ansible-playbook shell2.yml --list-host

# ansible-playbook shell2.yml 

------------------------------------------------------------------------------------------- 

How to run shell only if a file does exist

vim shell3.txt

---
- hosts: webserver1
  tasks:
  - name: remove file if exist
    shell: rm $HOME/hello.txt
    args:
      removes: $HOME/hello.txt
...      


# ansible-playbook shell3yml --syntax-check

# ansible-playbook shell3.yml --list-host

# ansible-playbook shell3.yml   

--------------------------------------------------------------------------

How to run shell in a different directory

vim shell4.yml

---
- name: execute shell module with chdir command
  hosts: webserver1
  tasks:
  - name: create file with specified directory
    shell: echo "hello world" > hello.txt
    args:
      chdir: /tmp/ 
...      


# ansible-playbook shell4.yml --syntax-check

# ansible-playbook shell4.yml --list-host

# ansible-playbook shell4.yml   

---------------------------------------------------------------------------------------------
ansible template module

vim template.yml

---
- hosts: webserver1
  vars:
    ansible_os_family: 'Linux'
    ansible_os_distribution: 'ubuntu'
    ansible_os_distribution_version: '18.04'
  tasks:  
  - name: copy the file
    template:
      src: os.j2
      dest: /tmp/os.txt
    delegate_to: localhost 
...          



create jinja2 template file

vim os.j2

Os family {{ansible_os_family}}
Os distribution {{ansible_os_distribution}}
Os version {{ansible_os_distribution_version}}

# ansible-playbook template.yml --syntax-check

# ansible-playbook template.yml --list-host

# ansible-playbook template.yml


cat /tmp/os.txt

Os family linux
Os distribution ubuntu
Os version 18.04

------------------------------------------------------------------------------------------------------

we can taje backup using template module

---
- hosts: webserver1
  vars:
    ansible_os_family: 'Linux'
    ansible_os_distribution: 'centos'
    ansible_os_distribution_version: 'centos 8'
  tasks:  
  - name: copy the file
    template:
      src: os2.j2
      dest: /tmp/os1.txt 
      backup: yes 
    delegate_to: localhost 
...          


vim os2.j2

Os family {{ansible_os_family}}
Os distribution {{ansible_os_distribution}}
Os version {{ansible_os_distribution_version}}   

# ansible-playbook template1.yml --syntax-check

# ansible-playbook template1.yml --list-host

# ansible-playbook template1.yml


cat /tmp/os1.txt

---------------------------------------------------------------------------------------------

template list

vim template3.yml

---
- hosts: webserver1
  vars:
    list: ['saiva','kaviya','kavin','rohit']
  tasks:
  - name: access list using jinja2 template
    template: 
      src: list.j2
      dest: /tmp/list.txt
    delegate_to: localhost  
...      


vim list.j2

{% for i in list %}
  {{ i }}
{% endfor %}

# ansible-playbook template3.yml --syntax-check

# ansible-playbook template3.yml --list-host

# ansible-playbook template3.yml


cat /tmp/list.txt

-----------------------------------------------------------------------------------
template example using dict

vim template4.yml

---
- hosts: webserver1
  vars:
    dict: {'saiva:kaviya','kavin:ll',"rohit:kk"}
  tasks:  
  - name:    
    template:
      src: dict.j2
      dest: /tmp/dict.txt
    delegate_to: localhost  
...    

vim dict.j2

{% for i in dict %}
   {{ i.ljust(50) }}
{% endfor %}

# ansible-playbook template4.yml --syntax-check

# ansible-playbook template4.yml --list-host

# ansible-playbook template4.yml

--------------------------------------------------------------------------------------------------

include and import_playbook module

vim include.yml

---
- hosts: webserver1
  tasks:
    - debug:
        msg: play1
- name: include playbook
  import_playbook: command.yml
...           


---
- hosts: webserver1
  tasks:
    - debug:
        msg: play1
- name: include playbook
  include: command.yml
...  


# ansible-playbook include.yml --syntax-check

# ansible-playbook include.yml --list-host

# ansible-playbook include.yml

-----------------------------------------------------------------------------------------------------

ansible variable

vim var1.yml

---
- hosts: webserver1
  vars:
    saiva: kaviya
  tasks:
  - name:
    debug:
      msg: "{{ saiva }}" 
... 

# ansible-playbook var1.yml --syntax-check

# ansible-playbook var1.yml --list-host

# ansible-playbook var1.yml

---------------------------------------------------------------------------------------------------
    
ansible variable

vim var2.yml

---
- hosts: webserver1
  vars:
    saiva: 100
  tasks:
  - name:
    debug:
      msg: "{{ saiva }}" 
... 

# ansible-playbook  var2.yml --syntax-check

# ansible-playbook  var2.yml --list-host

# ansible-playbook  var2.yml

------------------------------------------------------------------------------------------------

variable with array

vim var4.yml

---
- hosts: all
  vars:
    students:
      - saiva
      - prem
      - kabil
      - vijay
      - arun
  tasks:
  - name: variable with array
    debug:
      msg: "{{ students[1] }}"
...      
     

# ansible-playbook  var4.yml --syntax-check

# ansible-playbook  var4.yml --list-host

# ansible-playbook  var4.yml




vim var5.yml

---
- hosts: all
  vars:
    students:
      - saiva
      - prem
      - kabil
      - vijay
      - arun
  tasks:
  - name: variable with array
    debug:
      msg: "{{ students }}"
...      
     

# ansible-playbook  var5.yml
 --syntax-check

# ansible-playbook  var5.yml
 --list-host

# ansible-playbook  var5.yml

---------------------------------------------------------------------------------------------------

variable with dictionary

vim var6.yml

---
- hosts: webserver1 
  vars:
    students:
      - saiva:
          district: Ramnad
          native: thuval 
      - prem:
          district: madurai
          native: natarmanaglam
      - jino:
          district: sivagangai
          native: kaikatti
  tasks:
  - name: variable with dictionary
    debug:
      var: students

...       

# ansible-playbook var6.yml --syntax-check

# ansible-playbook var6.yml --list-hosts

# ansible-playbook var6.yml

-----------------------------------------------------------------------------------------------------------

ansible conditional playbook

vim when.yml

---
- name: install apache webserver
  hosts: all
  tasks:
  - name: install apache webserver on centos 7
    yum: name=httpd state=present
    when: ansible_os_family == "RedHat"
    
  - name: install apache webserver on ubuntu
    apt: name=apache2 state=present
    when: ansible_os_family == "Debian" 

... 


# ansible-playbook when.yml --syntax-check

# ansible-playbook when.yml --list-hosts

# ansible-playbook when.yml



uninsatll package using condtional statement



vim when1.yml

---
- name: install apache webserver
  hosts: all
  tasks:
  - name: install apache webserver on centos 7
    yum: name=httpd state=absent
    when: ansible_os_family == "RedHat"
    
  - name: install apache webserver on ubuntu
    apt: name=apache2 state=absent
    when: ansible_os_family == "Debian" 

... 


# ansible-playbook when1.yml --syntax-check

# ansible-playbook when1.yml --list-hosts

# ansible-playbook when1.yml

-------------------------------------------------------------------------------------------

ansible and condition 


vim when2.yml

---
- name: using and condition install apache webserver
  hosts: all
  tasks:
  - name: install apache webserver
    apt: name=apache2 state=present
    become: no
    when: ansible_os_family == "Debian" and ansible_distribution_version == "18.04"
...  

# ansible-playbook when2.yml --syntax-check

# ansible-playbook when2.yml --list-hosts

# ansible-playbook when2.yml


if you give second condition wrong it skipped the installation


vim when3.yml

---
- name: using and condition install apache webserver
  hosts: all
  tasks:
  - name: install apache webserver
    apt: name=apache2 state=present
    become: no
    when: ansible_os_family == "Debian" and ansible_distribution_version == "16.04"
...  

# ansible-playbook when3.ymll --syntax-check

# ansible-playbook when3.yml --list-hosts

# ansible-playbook when3.yml


--------------------------------------------------------------------------------------------------
ansible or conditional

vim when4.yml

---
- name: check disk space   
  hosts: all
  tasks:
  - name: check server disk space usage
    shell: df -Th
    register: _result
  - debug:
      var: _result
    when: ansible_os_family == "Debian"  or ansible_os_family == "RedHat"
... 

# ansible-playbook when4.ymll --syntax-check

# ansible-playbook when4.yml --list-hosts

# ansible-playbook when4.yml

-------------------------------------------------------------------------------------------------

using conditional statement check file exist or not

vim when6.yml
 ---
- name: check file exist status
  hosts: webserver2
  tasks:
  - stat:
      path: /root/user.txt 
    register: result
  - debug:
      msg: "ansible when file Exists Example."
    when: result.stat.exists
...           

# ansible-playbook when6.ymll --syntax-check

# ansible-playbook when6.yml --list-hosts

# ansible-playbook when6.yml


vim when7.yml


---
- name: file is not present on remote server
  hosts: webserver2
  tasks:
  - name: check file there or not
    stat:
      path: /root/user1.txt
    register: result
  - debug:
      msg: "ansible when file not present Example"
    when: result.stat.exists == false

...

# ansible-playbook when7.yml --syntax-check

# ansible-playbook when7.yml --list-hosts

# ansible-playbook when7.yml

--------------------------------------------------------------------------------------

ansible loop

using ansible loop create multiple user on remote server

vim loop1.yml

---
- name: ansible loop method
  hosts: webserver1
  tasks:
  - name: create multiple user with ansible loop concept
    command: adduser {{ item }}
    with_items:
    - sai
    - kavi
...  

# ansible-playbook loop1.yml --syntax-check

# ansible-playbookloop1.yml --list-hosts

# ansible-playbook loop1.yml




using ansible loop delete multiple user on remote server


using ansible loop create multiple user on remote server

vim loop2.yml

---
- name: ansible loop method
  hosts: webserver1
  tasks:
  - name: create multiple user with ansible loop concept
    command: userdel -r {{ item }}
    with_items:
    - sai
    - kavi
...  

          
-----------------------------------------------------------------------------------------------

install multiple pacake in ansible loop

vim loop3.yml

---
- hosts: webserver2
  tasks:
  - name: install multiple packages on ubuntu
    apt: name={{ item }} state=present
    with_items:
    - apache2
    - vsftpd
  - name: start apache service
    service: name=apache2 state=started

  - name: start vsftpd service
    service: name=vsftpd state=started    
...





uninstall multiple packages

vim loop4.yml


---
- hosts: webserver2
  tasks:
  - name: install multiple packages on ubuntu
    apt: name={{ item }} state=absent
    with_items:
    - apache2
    - vsftpd

...

# ansible-playbook loop4.yml --syntax-check

# ansible-playbook loop4.ymll --list-hosts

# ansible-playbook loop4.yml  

---------------------------------------------------------------------------------------------------

ansible roles
==============
create ansible role

cd /etc/ansible/roles

create apache role inside a roles directory

# ansible-galaxy init apache --offline

# cd apache/
 
# ll

drwxr-xr-x 10 root root 4096 Apr 18 08:00 ./
drwxr-xr-x  3 root root 4096 Apr 18 08:00 ../
-rw-r--r--  1 root root  539 Apr 18 08:00 .travis.yml
-rw-r--r--  1 root root 1328 Apr 18 08:00 README.md
drwxr-xr-x  2 root root 4096 Apr 18 08:00 defaults/
drwxr-xr-x  2 root root 4096 Apr 18 08:00 files/
drwxr-xr-x  2 root root 4096 Apr 18 08:00 handlers/
drwxr-xr-x  2 root root 4096 Apr 18 08:00 meta/
drwxr-xr-x  2 root root 4096 Apr 18 08:00 tasks/
drwxr-xr-x  2 root root 4096 Apr 18 08:00 templates/
drwxr-xr-x  2 root root 4096 Apr 18 08:00 tests/
drwxr-xr-x  2 root root 4096 Apr 18 08:00 vars/


# tree

.
└── apache
    ├── README.md
    ├── defaults
    │   └── main.yml
    ├── files
    ├── handlers
    │   └── main.yml
    ├── meta
    │   └── main.yml
    ├── tasks
    │   └── main.yml
    ├── templates
    ├── tests
    │   ├── inventory
    │   └── test.yml
    └── vars
        └── main.yml

ansible role execute throuh main.yml


# cd tasks

# vim main.yml

---
# tasks file for apache

- include: install.yml
- include: configure.yml
- include: service.yml  

esc
:wq!

next==> need to create included file inside the directory

vim install.yml

---
- name: install  the apache web server 
  apt:
    name: apache2
    state: latest
...      


vim configure.yml

---
- name: apache2.conf
  copy:
    src: apache.conf
    dest: /etc/apache2/apache2.conf
  notify:
  - restart the apache service
- name: 
  copy:
    src: index.html
    dest: /var/www/html/index.html
...   


vim service.yml

---
- name: starting the apache service
  service:
    name: apache2
    state: started
...  


# cd ../files

# cp /etc/apache2/apache2.conf

do some modification in apache2.conf


vim index.html

<html>
<h1> saiva learning ansible</h1>	
</html>	
===================

configure handler

cd handlers

vim main.yml

---
# handlers file for apache
- name: restart the apache service
  service:
    name: apache2
    state: restarted
...


cd /etc/ansible

vim site.yml

---

- hosts: webserver2
  roles:
  - apache

esc
:wq!



# ansible-playbook site.yml --syntax-check


# ansible-playbook site.yml 

PLAY [webserver2] ******************************************************************************************************************************

TASK [Gathering Facts] *************************************************************************************************************************
ok: [172.17.0.4]

TASK [apache : install  the apache web server] *************************************************************************************************
ok: [172.17.0.4]

TASK [apache : apache2.conf] *******************************************************************************************************************
changed: [172.17.0.4]

TASK [apache : copy] ***************************************************************************************************************************
changed: [172.17.0.4]

TASK [apache : starting the apache service] ****************************************************************************************************
changed: [172.17.0.4]

RUNNING HANDLER [apache : restart the apache service] ******************************************************************************************
changed: [172.17.0.4]

PLAY RECAP *************************************************************************************************************************************
172.17.0.4                 : ok=6    changed=4    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   


============================================================================================================

ansible vault

create user.yml file and confirm that playbook working properly

vim user.yml

---
- name: adding user to remote server
  hosts: webserver1
  tasks:
  - name: create user
    user:
      name: kavi
      password: kavi@123
      comment: "kaviya"
      shell: /bin/bash
      createhome: yes
      home: /home/kavi
  - name: copying confidential aagreement
    copy:
      content: "It's confidential Agreement between employee and Employers\n"
      dest: /home/kavi/Agreement 
...      
      

# nasible-playbook user.yml --syntax-check

# ansible-playbook user.yml --list-host

# ansible-playbook user.yml



Encrypt user.yml file using ansible vault

# ansible-vault encrypt user.yml

after encrypt the user.yml file  we can't see previous format, it will encrypted 

# cat user.yml

we can view encrypted yaml file like below

# ansible-vault view user.yml

Vault password : saiva

---
- name: adding user to remote server
  hosts: webserver1
  tasks:
  - name: create user
    user:
      name: kavi
      password: kavi@123
      comment: "kaviya"
      shell: /bin/bash
      createhome: yes
      home: /home/kavi
  - name: copying confidential Agreementi
    copy:
      content: "It's confidential Agreement between employee and Employers\n"
      dest: /home/kavi/Agreement 
...      
      

edit encrypted playbook

# ansible-vault edit user.yml

Vault password: saiva


run encrypted playbook like below

# ansible-playbook user.yml --ask-vault-password
Vault password: saiva
--------------------------------------------------------------------------------------------------------------------------------

run palybook ansother way using password file


create password file and store password on that file

vim vault-password

saiva

esc
:wq!


run playbook


# ansible-playbook user.yml --vault-password-file vault-password

PLAY [adding user to remote server] ************************************************************************************************************

TASK [Gathering Facts] *************************************************************************************************************************
ok: [172.17.0.2]

TASK [create user] *****************************************************************************************************************************
[WARNING]: The input password appears not to have been hashed. The 'password' argument must be encrypted for this module to work properly.
ok: [172.17.0.2]

TASK [copying confidential Agreementi] *********************************************************************************************************
ok: [172.17.0.2]

PLAY RECAP *************************************************************************************************************************************
172.17.0.2                 : ok=3    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   


---------------------------------------------------------------------------------------------

change ansible vault password

# ansible-vault rekey user.yml

Vault password: 
New Vault password: 
Confirm New Vault password: 
Rekey successful


decrypt ansible-vault file

# ansible-vault decrypt user.yml

Vault password: 
Decryption successful
	
# cat user.yml

---
- name: adding user to remote server
  hosts: webserver1
  tasks:
  - name: create user
    user:
      name: kavi
      password: kavi@123
      comment: "kaviya"
      shell: /bin/bash
      createhome: yes
      home: /home/kavi
  - name: copying confidential Agreementi
    copy:
      content: "It's confidential Agreement between employee and Employers\n"
      dest: /home/kavi/Agreement 
...      
          
-----------------------------------------------------------------------------------------------------------------





 




















	










 






    















     










     











